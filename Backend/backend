import os
from dotenv import load_dotenv
from google import genai
from google.genai import types
import requests
import pandas as pd
import socket
import asyncio
import websockets
import json

load_dotenv(os.path.join(os.path.dirname(__file__), '.env'))

API_KEY = os.getenv('ADZUNA_API_KEY')
APP_ID = os.getenv('ADZUNA_APP_ID')
Gemini_API_Key = os.getenv('GEMINI_API_KEY')

async def backend(websocket):
    print("[INFO] Connection received.")
    data = await websocket.recv()
    parsed_data = json.loads(data) 
    searchTerm = parsed_data["searchTerm"]
    target_language = parsed_data["language"]
    sys_prompt = '''
    You are a highly accurate and meticulous translator specializing in translations between the English language and {target_language} language. Your primary task is to translate text provided by the user from English to {target_language}.
    '''.format(target_language=target_language)
    sys_prompt2 = '''
    Requirement: Give your answer in 1 word only.
    Hint: the word provided can be in English or {target_language}. 
    Instruction: You will look for a single job title that is closely related to {searchTerm} is'''.format(target_language=target_language, searchTerm=searchTerm)

    client = genai.Client(api_key=Gemini_API_Key)

    response_ = client.models.generate_content(
                    model='gemini-2.0-flash', 
                    contents=searchTerm, 
                    config=types.GenerateContentConfig(
                        system_instruction=sys_prompt2
                    ))
    gud_job = response_.text

    base_url = 'https://api.adzuna.com/v1/api/jobs/us/search/1'

    params = {
        'app_id': APP_ID,
        'app_key': API_KEY,
        'results_per_page': 1,
        'what': gud_job,
        'where': 'Kentucky',
    }

    results = []
    response = requests.get(base_url, params=params)

    if response.status_code == 200:
        data = response.json()
        for job in data['results']:
            descriptionTranslation = client.models.generate_content(
                    model='gemini-2.0-flash', 
                    contents=job['title'], 
                    config=types.GenerateContentConfig(
                        system_instruction=sys_prompt
                    ))
            titleTranslation = client.models.generate_content(
                    model='gemini-2.0-flash', 
                    contents=job.get('description', 'No description available'), 
                    config=types.GenerateContentConfig(
                        system_instruction=sys_prompt
                    ))
            job_dict = {
                "id": job.get("id", job.get("redirect_url", "")),
                "title": job["title"],
                "company": job["company"]["display_name"],
                "location": job['location']['display_name'],
                "description": job.get('description', 'No description available'),
                "url": job['redirect_url'],
                "title_translation": titleTranslation.text,
                "description_translation": descriptionTranslation.text
            }
            results.append(job_dict)
        print("[INFO] Sending response to client.")
        await websocket.send(json.dumps({"results": results}))

async def main():
    print("[INFO] Backend server starting on ws://localhost:8765 ...")
    async with websockets.serve(backend, "localhost", 8765):
        print("[INFO] Backend server is running and listening for connections.")
        await asyncio.Future()

if __name__ == "__main__":
    asyncio.run(main())
